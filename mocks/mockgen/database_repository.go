// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "invoice-service/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseRepository is a mock of DatabaseRepository interface.
type MockDatabaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepositoryMockRecorder
}

// MockDatabaseRepositoryMockRecorder is the mock recorder for MockDatabaseRepository.
type MockDatabaseRepositoryMockRecorder struct {
	mock *MockDatabaseRepository
}

// NewMockDatabaseRepository creates a new mock instance.
func NewMockDatabaseRepository(ctrl *gomock.Controller) *MockDatabaseRepository {
	mock := &MockDatabaseRepository{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepository) EXPECT() *MockDatabaseRepositoryMockRecorder {
	return m.recorder
}

// FindInvestors mocks base method.
func (m *MockDatabaseRepository) FindInvestors(ctx context.Context) ([]domain.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInvestors", ctx)
	ret0, _ := ret[0].([]domain.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInvestors indicates an expected call of FindInvestors.
func (mr *MockDatabaseRepositoryMockRecorder) FindInvestors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInvestors", reflect.TypeOf((*MockDatabaseRepository)(nil).FindInvestors), ctx)
}

// FindTrades mocks base method.
func (m *MockDatabaseRepository) FindTrades(ctx context.Context, tradeStatus *string) ([]domain.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrades", ctx, tradeStatus)
	ret0, _ := ret[0].([]domain.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrades indicates an expected call of FindTrades.
func (mr *MockDatabaseRepositoryMockRecorder) FindTrades(ctx, tradeStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrades", reflect.TypeOf((*MockDatabaseRepository)(nil).FindTrades), ctx, tradeStatus)
}

// GetBidsFromInvoiceAndInvestor mocks base method.
func (m *MockDatabaseRepository) GetBidsFromInvoiceAndInvestor(ctx context.Context, invoiceID string, investorID *int) ([]domain.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBidsFromInvoiceAndInvestor", ctx, invoiceID, investorID)
	ret0, _ := ret[0].([]domain.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidsFromInvoiceAndInvestor indicates an expected call of GetBidsFromInvoiceAndInvestor.
func (mr *MockDatabaseRepositoryMockRecorder) GetBidsFromInvoiceAndInvestor(ctx, invoiceID, investorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidsFromInvoiceAndInvestor", reflect.TypeOf((*MockDatabaseRepository)(nil).GetBidsFromInvoiceAndInvestor), ctx, invoiceID, investorID)
}

// GetInvestorByID mocks base method.
func (m *MockDatabaseRepository) GetInvestorByID(ctx context.Context, investorID int) (*domain.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestorByID", ctx, investorID)
	ret0, _ := ret[0].(*domain.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestorByID indicates an expected call of GetInvestorByID.
func (mr *MockDatabaseRepositoryMockRecorder) GetInvestorByID(ctx, investorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestorByID", reflect.TypeOf((*MockDatabaseRepository)(nil).GetInvestorByID), ctx, investorID)
}

// GetInvoiceByID mocks base method.
func (m *MockDatabaseRepository) GetInvoiceByID(ctx context.Context, invoiceID string) (*domain.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByID", ctx, invoiceID)
	ret0, _ := ret[0].(*domain.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByID indicates an expected call of GetInvoiceByID.
func (mr *MockDatabaseRepositoryMockRecorder) GetInvoiceByID(ctx, invoiceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByID", reflect.TypeOf((*MockDatabaseRepository)(nil).GetInvoiceByID), ctx, invoiceID)
}

// GetIssuerByID mocks base method.
func (m *MockDatabaseRepository) GetIssuerByID(ctx context.Context, issuerID int) (*domain.Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuerByID", ctx, issuerID)
	ret0, _ := ret[0].(*domain.Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuerByID indicates an expected call of GetIssuerByID.
func (mr *MockDatabaseRepositoryMockRecorder) GetIssuerByID(ctx, issuerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuerByID", reflect.TypeOf((*MockDatabaseRepository)(nil).GetIssuerByID), ctx, issuerID)
}

// GetTotalBidsAmount mocks base method.
func (m *MockDatabaseRepository) GetTotalBidsAmount(ctx context.Context, invoiceID string) (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalBidsAmount", ctx, invoiceID)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalBidsAmount indicates an expected call of GetTotalBidsAmount.
func (mr *MockDatabaseRepositoryMockRecorder) GetTotalBidsAmount(ctx, invoiceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalBidsAmount", reflect.TypeOf((*MockDatabaseRepository)(nil).GetTotalBidsAmount), ctx, invoiceID)
}

// GetTradeByID mocks base method.
func (m *MockDatabaseRepository) GetTradeByID(ctx context.Context, tradeID string) (*domain.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeByID", ctx, tradeID)
	ret0, _ := ret[0].(*domain.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeByID indicates an expected call of GetTradeByID.
func (mr *MockDatabaseRepositoryMockRecorder) GetTradeByID(ctx, tradeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeByID", reflect.TypeOf((*MockDatabaseRepository)(nil).GetTradeByID), ctx, tradeID)
}

// GetTradeByInvoice mocks base method.
func (m *MockDatabaseRepository) GetTradeByInvoice(ctx context.Context, invoiceID string) (*domain.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeByInvoice", ctx, invoiceID)
	ret0, _ := ret[0].(*domain.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeByInvoice indicates an expected call of GetTradeByInvoice.
func (mr *MockDatabaseRepositoryMockRecorder) GetTradeByInvoice(ctx, invoiceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeByInvoice", reflect.TypeOf((*MockDatabaseRepository)(nil).GetTradeByInvoice), ctx, invoiceID)
}

// SaveBid mocks base method.
func (m *MockDatabaseRepository) SaveBid(ctx context.Context, bid *domain.Bid) (*domain.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBid", ctx, bid)
	ret0, _ := ret[0].(*domain.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBid indicates an expected call of SaveBid.
func (mr *MockDatabaseRepositoryMockRecorder) SaveBid(ctx, bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBid", reflect.TypeOf((*MockDatabaseRepository)(nil).SaveBid), ctx, bid)
}

// SaveInvestor mocks base method.
func (m *MockDatabaseRepository) SaveInvestor(ctx context.Context, investor *domain.Investor) (*domain.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInvestor", ctx, investor)
	ret0, _ := ret[0].(*domain.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveInvestor indicates an expected call of SaveInvestor.
func (mr *MockDatabaseRepositoryMockRecorder) SaveInvestor(ctx, investor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInvestor", reflect.TypeOf((*MockDatabaseRepository)(nil).SaveInvestor), ctx, investor)
}

// SaveInvoice mocks base method.
func (m *MockDatabaseRepository) SaveInvoice(ctx context.Context, invoice *domain.Invoice) (*domain.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInvoice", ctx, invoice)
	ret0, _ := ret[0].(*domain.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveInvoice indicates an expected call of SaveInvoice.
func (mr *MockDatabaseRepositoryMockRecorder) SaveInvoice(ctx, invoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInvoice", reflect.TypeOf((*MockDatabaseRepository)(nil).SaveInvoice), ctx, invoice)
}

// SaveIssuer mocks base method.
func (m *MockDatabaseRepository) SaveIssuer(ctx context.Context, issuer *domain.Issuer) (*domain.Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIssuer", ctx, issuer)
	ret0, _ := ret[0].(*domain.Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveIssuer indicates an expected call of SaveIssuer.
func (mr *MockDatabaseRepositoryMockRecorder) SaveIssuer(ctx, issuer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIssuer", reflect.TypeOf((*MockDatabaseRepository)(nil).SaveIssuer), ctx, issuer)
}

// SaveTrade mocks base method.
func (m *MockDatabaseRepository) SaveTrade(ctx context.Context, trade *domain.Trade) (*domain.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTrade", ctx, trade)
	ret0, _ := ret[0].(*domain.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTrade indicates an expected call of SaveTrade.
func (mr *MockDatabaseRepositoryMockRecorder) SaveTrade(ctx, trade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTrade", reflect.TypeOf((*MockDatabaseRepository)(nil).SaveTrade), ctx, trade)
}
